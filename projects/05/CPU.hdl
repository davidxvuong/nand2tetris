// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //Decoder
    Decoder(instr=instruction, a=a, opcode=opcode, dest[0]=d1, dest[1]=d2, dest[2]=d3, jump=jump, jump[0]=j1, jump[1]=j2, jump[2]=j3, comp[0]=c1, comp[1]=c2, comp[2]=c3, comp[3]=c4, comp[4]=c5, comp[5]=c6, dest[2]=writeM);
    
    //A-Register Mux input
    Mux16(a=instruction, b=outMtemp, sel=opcode, out=areginput);

    //A-Register
    Not(in=opcode, out=notopcode);
    Or(a=notopcode, b=d1, out=aregload);
    ARegister(in=areginput, load=aregload, out=aregoutput, out[0..14]=addressM);

    //ALU input 2 mux
    Mux16(a=aregoutput, b=inM, sel=a, out=aluinput2);

    //D-Register
    DRegister(in=outMtemp, load=d2, out=aluinput1);

    //ALU
    ALU(x=aluinput1, y=aluinput2, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=outMtemp, zr=zr, ng=ng);

    //Load
    Load(zr=zr, ng=ng, jump=jump, load=load, inc=inc);

    //Program Counter
    PC(in=aregoutput, load=load, inc=inc, reset=reset, out[0..14]=pc);
}