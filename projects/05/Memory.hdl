// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    Not(in=address[14], out=notaddress14);
    Not(in=address[13], out=notaddress13);

    //RAM16K load
    And(a=notaddress14, b=load, out=ram16kload);

    //Screen load
    And(a=address[14], b=notaddress13, out=screentemp);
    And(a=screentemp, b=load, out=screenload);

    //Memory
    RAM16K(in=in, load=ram16kload, address=address[0..13], out=ram16kout);

    //Screen
    Screen(in=in, load=screenload, address=address[0..12], out=screenout);

    //Keyboard
    Keyboard(out=kbdout);

    //4-way mux output
    Mux4Way16(a=ram16kout, b=ram16kout, c=screenout, d=kbdout, sel=address[13..14], out=outtemp);


    //outside memory check
    Or8Way(in=address[0..7], out=invalidaddrtemp);
    Or8Way(in[0..4]=address[8..12], in[5]=invalidaddrtemp, in[6..7]=false, out=invalidaddress);
    And(a=address[14], b=address[13], out=maxaddr);
    And(a=maxaddr, b=invalidaddress, out=isnotvalidaddr);

    Mux16(a=outtemp, b=false, sel=isnotvalidaddr, out=out);
}